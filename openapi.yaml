openapi: '3.0.1'
info:
  version: 1.0.0
  title: Product-store
  description: A simple Product Store

servers:
  - url: https://localhost:3000

paths:
  /products:
    get:
      description: Obtains information about all products
      responses:
        200:
          description: returns all products available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProducts'

  /products/{id}:
    parameters:
      - $ref: '#/components/parameters/IDParameter'

    get:
      description: get a specific product
      responses:
        200:
          description: Product retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProduct'

        404:
          $ref: '#/components/responses/404NotFound'

  /orders:
    get:
      description: Obtains information about all orders for that customer
      security:
        - bearerAuth: []
      responses:
        200:
          description: returns all orders for the customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrders'
        401:
          $ref: '#/components/responses/UnauthorizedError'

    post:
      description: Creates a new order for that customer
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOrder'

      responses:
        201:
          description: order is posted successfully
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Order created successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /orders/{id}:
    parameters:
      - $ref: '#/components/parameters/IDParameter'

    get:
      description: get a specific order
      security:
        - bearerAuth: []
      responses:
        200:
          description: Order retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrder'

        401:
          $ref: '#/components/responses/UnauthorizedError'

        404:
          $ref: '#/components/responses/404NotFound'

    delete:
      description: deletes an order
      security:
        - bearerAuth: []
      responses:
        200:
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Order deleted!
        401:
          $ref: '#/components/responses/UnauthorizedError'

        404:
          $ref: '#/components/responses/404NotFound'

    put:
      description: Updates an order
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOrder'

      responses:
        200:
          description: Updates an order successfully
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Order updated successfully!
        401:
          $ref: '#/components/responses/UnauthorizedError'

        404:
          $ref: '#/components/responses/404NotFound'

  /customers/signup:
    post:
      description: signs up a new user in the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupCustomer'

      responses:
        201:
          description: Customer was added to the database
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Customer added successfully
        409:
          description: Conflict - customer already exists
          content:
            application/json:
              schema:
                type: object
                example:
                  error: Customer already exists

  /customers/login:
    post:
      description: Login for the user if found in the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCustomer'

      responses:
        200:
          description: Customer successfully logged in
          content:
            application/json:
              schema:
                type: object
                example:
                  username: john
                  token: big_token_here
        403:
          $ref: '#/components/responses/IncorrectCredentials'

        404:
          $ref: '#/components/responses/404NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginCustomer:
      description: Model for signup and login of a Customer
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: john_doe
        password:
          type: string
          example: pass1234
    SignupCustomer:
      description: Model for signup and login of a Customer
      type: object
      required:
        - username
        - password
        - name
        - surname
        - contact
      properties:
        username:
          type: string
          example: john_doe
        password:
          type: string
          example: pass1234
        name:
          type: string
          example: John
        surname:
          type: string
          example: Doe
        contact:
          type: number
          example: 777999888
    PostOrder:
      description: Model for posting an Order
      type: object
      required:
        - customer
        - product
        - quantity
      properties:
        customer:
          type: string
          example: John
        product:
          type: string
          example: apples
        quantity:
          type: integer
          example: 5
    PutOrder:
      description: Model for updating an Order
      type: object
      required:
        - product
        - quantity
      properties:
        customer:
          type: string
          example: John
        product:
          type: string
          example: apples
        quantity:
          type: integer
          example: 5
    GetOrders:
      description: Array of orders with order information
      type: array
      items:
        $ref: '#/components/schemas/GetOrder'
    GetOrder:
      description: Model containing information received for Order
      type: object
      properties:
        _id:
          type: integer
          example: 423
        product:
          type: string
          example: pears
        customer:
          type: string
          example: john
        username:
          type: string
          example: john_doe
        quantity:
          type: integer
          example: 15
        total_price:
          type: number
          example: 52
    GetProducts:
      description: Array of products with product information
      type: array
      items:
        $ref: '#/components/schemas/GetProduct'
    GetProduct:
      description: Model containing information received for Product
      type: object
      properties:
        _id:
          type: integer
          example: 11
        name:
          type: string
          example: pears
        quantity:
          type: integer
          example: 2
        price:
          type: number
          example: 10

  parameters:
    IDParameter:
      name: id
      in: path
      required: true
      schema:
        type: integer
        example: 12

  responses:
    404NotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            example:
              error: Not found
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            example:
              error: Not authorized
    IncorrectCredentials:
      description: Incorrect credentials
      content:
        application/json:
          schema:
            type: object
            example:
              error: Incorrect password
